#!venv/bin/python
# uses: feedparser 6.0.11, openai 1.10.0

# import modules
from modules.openai import chat_completion
import feedparser
import subprocess
import sys

# define how many entries to return from which feed
FEED_URL = "https://feeds.bbci.co.uk/news/world/rss.xml"
FEED_SIZE = 10

# define the request parameters - don't set temperature too low or it will just repeat back entry titles
SYSTEM_PROMPT = f"""This is an RSS news feed. Concisely refactor each of these entries, using one (1) representative emoji for each 'category' (e.g., national flag).
Ensure to include all key information, e.g., locations, key players, implications understood and highlighted.
Avoid repeating titles or using colons.
Succinctly format each line in approx ten (10) words like this:
```
‚öîÔ∏è Fighting continues in Greenland as the invading US forces push north.
üá´üá∑ The French town of Rouen plays host to the Japanese football team.
üêß Zoo officials in Tromso, Norway, hunt sixteen escaped penguins.
[etc]
```
"""
MAX_TOKENS = 300
TEMPERATURE = 1.4
MODEL = "gpt-3.5-turbo"


# function to parse the RSS feed and return a list of entries
def feedreader():
    feed = feedparser.parse(FEED_URL)
    items = []
    for index, feed_entry in enumerate(feed.entries[:(FEED_SIZE)], start=1):
        item = f"Entry {index}: ({feed_entry['title']}): Summary ({feed_entry['summary']})"
        items.append(item)
    if (len(items) != FEED_SIZE):
        print(f"[CRIT] {FEED_URL} did not return expected entries ({FEED_SIZE})")
        sys.exit(1)
    return items


# script entry point
if __name__ == "__main__":
    # set the user prompt to a string containing the returned RSS entries
    user_prompt = str(feedreader())

    # generate the completion and send a notification
    response = chat_completion(
        _system_prompt=SYSTEM_PROMPT,
        _user_prompt=user_prompt,
        _max_tokens=MAX_TOKENS,
        _temperature=TEMPERATURE,
        _model=MODEL)

    reply = response["content"]
    cost = response["total_tokens"]

    # display output
    print(f"[INFO] completion generated for {cost} tokens")
    subprocess.run(["dunstify", "-a", "news-gpt", "--", f"Today's news", f"{reply}"])
